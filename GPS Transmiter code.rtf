{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
/Arduino GPS transmitter\
#include <TinyGPS++.h>\
#include <SoftwareSerial.h>\
#include <RF24Network.h>\
#include <RF24.h>\
#include <SPI.h>\
static const int RXPin = 2, TXPin = 3;\
static const uint32_t GPSBaud = 9600;\
SoftwareSerial sGPS(RXPin, TXPin);\
TinyGPSPlus gps;\
double myLL[2];\
// nRF24L01(+) radio attached  (CE, CSN)\
RF24 radio(9,10);\
RF24Network network(radio);\
// Channel of our node\
const uint16_t channel = 60;\
// Address of our node\
const uint16_t this_node = 1;\
// Address of the base\
const uint16_t other_node = 0;\
// How many packets have we sent already\
unsigned long packets_sent;\
// Structure of our payload, limited to 32 bytes\
struct payload_t      // 32 bytes max\
\{\
 unsigned long counter;  // 4 bytes\
 double lat;       // 4 bytes\
 double lng;       // 4 bytes\
\};\
\
\
void getGPS();              // get GPS data\
static void smartDelay(unsigned long);  // ensures that the gps object is being "fed".\
void sendPayload();           // check if time to send payload\
void setup(void)\
\{\
 sGPS.begin(GPSBaud);\
 Serial.begin(115200);\
 SPI.begin();\
 radio.begin();\
 network.begin(channel, this_node);\
 radio.powerDown();\
\}\
void loop(void)\{\
  network.update();\
 while (sGPS.available() > 0)\{\
   if (gps.encode(sGPS.read()))\{\
     getGPS();\
     sendPayload();\
     smartDelay(2000);\
   \}\
 \}\
\}\
void getGPS()\{\
 if (gps.location.isValid())\{\
   myLL[0] = gps.location.lat();\
   myLL[1] = gps.location.lng();\
       Serial.print("lat: ");\
       Serial.println(myLL[0],7);\
       Serial.print("lng: ");\
       Serial.println(myLL[1],7);\
 \}\
\}\
void sendPayload()\{\
 payload_t payload = \{ packets_sent++, myLL[0], myLL[1]\};\
 RF24NetworkHeader header(other_node);\
 radio.powerUp();\
 delay(1);\
 bool ok = network.write(header,&payload,sizeof(payload));\
 radio.powerDown();\
\}\
static void smartDelay(unsigned long ms)\{\
 unsigned long start = millis();\
 do\
 \{\
   while (sGPS.available())\
   gps.encode(sGPS.read());\
 \} while (millis() - start < ms);\
\}}